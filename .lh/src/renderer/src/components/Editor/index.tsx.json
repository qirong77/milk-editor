{
    "sourceFile": "src/renderer/src/components/Editor/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1667633625983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1667804280585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n \n import { replaceAll } from '@milkdown/utils'\n import { useConfig } from './hooks/useConfig'\n import { usePlugins } from './hooks/usePlugin'\n+import { updateHeaders } from '../SideBar/utils/updateHeaders'\n \n-\n interface MilkdownEditor {\n   content: string\n   filePath: string\n }\n@@ -26,15 +26,16 @@\n   useEffect(() => {\n     if (!loading) {\n       const instance = getInstance()\n       instance?.action(replaceAll(content))\n+      updateHeaders()\n     }\n   }, [loading, content])\n   // 存储的函数必须根据副作用实时修改，否则不会更新\n-//   useEffect(() => {\n-//     window.api.sendToMain(SAVE_FILE, {\n-//       filePath: filePath,\n-//       newFileContent: markdown\n-//     })\n-//   }, [markdown])\n+  //   useEffect(() => {\n+  //     window.api.sendToMain(SAVE_FILE, {\n+  //       filePath: filePath,\n+  //       newFileContent: markdown\n+  //     })\n+  //   }, [markdown])\n   return <ReactEditor editor={editor} />\n }\n"
                },
                {
                    "date": 1667805936878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   console.log('MilkdownEditor-render')\n   const [markdown, setMarkdown] = useState('')\n   const { editor, loading, getInstance } = useEditor((root) => {\n     const newEditor = Editor.make()\n-    useConfig(newEditor, root, setMarkdown)\n+    useConfig(newEditor, root, setMarkdown,filePath)\n     usePlugins(newEditor)\n     return newEditor\n   })\n   // 全部替换，点击文件列表的时候起作用\n"
                },
                {
                    "date": 1667806479653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,13 @@\n }\n \n export const MilkdownEditor: React.FC<MilkdownEditor> = ({ content, filePath }) => {\n   console.log('MilkdownEditor-render')\n+\n   const [markdown, setMarkdown] = useState('')\n   const { editor, loading, getInstance } = useEditor((root) => {\n     const newEditor = Editor.make()\n-    useConfig(newEditor, root, setMarkdown,filePath)\n+    useConfig(newEditor, root, setMarkdown)\n     usePlugins(newEditor)\n     return newEditor\n   })\n   // 全部替换，点击文件列表的时候起作用\n@@ -30,12 +31,14 @@\n       updateHeaders()\n     }\n   }, [loading, content])\n   // 存储的函数必须根据副作用实时修改，否则不会更新\n-  //   useEffect(() => {\n-  //     window.api.sendToMain(SAVE_FILE, {\n-  //       filePath: filePath,\n-  //       newFileContent: markdown\n-  //     })\n-  //   }, [markdown])\n+  useEffect(() => {\n+    console.log('-------')\n+    console.log(filePath)\n+    // window.api.sendToMain(SAVE_FILE, {\n+    //   filePath: filePath,\n+    //   newFileContent: markdown\n+    // })\n+  }, [markdown])\n   return <ReactEditor editor={editor} />\n }\n"
                },
                {
                    "date": 1667807591983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { replaceAll } from '@milkdown/utils'\n import { useConfig } from './hooks/useConfig'\n import { usePlugins } from './hooks/usePlugin'\n import { updateHeaders } from '../SideBar/utils/updateHeaders'\n+import { SAVE_FILE } from '../../../../common/eventType'\n \n interface MilkdownEditor {\n   content: string\n   filePath: string\n@@ -34,11 +35,11 @@\n   // 存储的函数必须根据副作用实时修改，否则不会更新\n   useEffect(() => {\n     console.log('-------')\n     console.log(filePath)\n-    // window.api.sendToMain(SAVE_FILE, {\n-    //   filePath: filePath,\n-    //   newFileContent: markdown\n-    // })\n+    window.api.sendToMain(SAVE_FILE, {\n+      filePath: filePath,\n+      newFileContent: markdown\n+    })\n   }, [markdown])\n   return <ReactEditor editor={editor} />\n }\n"
                },
                {
                    "date": 1667807617408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n }\n \n export const MilkdownEditor: React.FC<MilkdownEditor> = ({ content, filePath }) => {\n   console.log('MilkdownEditor-render')\n-\n   const [markdown, setMarkdown] = useState('')\n   const { editor, loading, getInstance } = useEditor((root) => {\n     const newEditor = Editor.make()\n     useConfig(newEditor, root, setMarkdown)\n@@ -33,13 +32,8 @@\n     }\n   }, [loading, content])\n   // 存储的函数必须根据副作用实时修改，否则不会更新\n   useEffect(() => {\n-    console.log('-------')\n-    console.log(filePath)\n-    window.api.sendToMain(SAVE_FILE, {\n-      filePath: filePath,\n-      newFileContent: markdown\n-    })\n+    window.api.sendToMain(SAVE_FILE, filePath, markdown)\n   }, [markdown])\n   return <ReactEditor editor={editor} />\n }\n"
                }
            ],
            "date": 1667633625983,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react'\nimport { Editor } from '@milkdown/core'\n\nimport { ReactEditor, useEditor } from '@milkdown/react'\n\nimport { replaceAll } from '@milkdown/utils'\nimport { useConfig } from './hooks/useConfig'\nimport { usePlugins } from './hooks/usePlugin'\n\n\ninterface MilkdownEditor {\n  content: string\n  filePath: string\n}\n\nexport const MilkdownEditor: React.FC<MilkdownEditor> = ({ content, filePath }) => {\n  console.log('MilkdownEditor-render')\n  const [markdown, setMarkdown] = useState('')\n  const { editor, loading, getInstance } = useEditor((root) => {\n    const newEditor = Editor.make()\n    useConfig(newEditor, root, setMarkdown)\n    usePlugins(newEditor)\n    return newEditor\n  })\n  // 全部替换，点击文件列表的时候起作用\n  useEffect(() => {\n    if (!loading) {\n      const instance = getInstance()\n      instance?.action(replaceAll(content))\n    }\n  }, [loading, content])\n  // 存储的函数必须根据副作用实时修改，否则不会更新\n//   useEffect(() => {\n//     window.api.sendToMain(SAVE_FILE, {\n//       filePath: filePath,\n//       newFileContent: markdown\n//     })\n//   }, [markdown])\n  return <ReactEditor editor={editor} />\n}\n"
        }
    ]
}
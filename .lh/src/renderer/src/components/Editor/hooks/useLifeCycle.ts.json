{
    "sourceFile": "src/renderer/src/components/Editor/hooks/useLifeCycle.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1666015314991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1666015838550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { Ctx } from '@milkdown/core'\n import { useUpdateHeaders } from '@renderer/components/SideBar/hooks/useUpdateHeader'\n \n let isFileChange = false\n-export const useConfig = (ctx: Ctx, file: { filePath: string; content: string }) => {\n+export const useLifeCycle = (ctx: Ctx) => {\n   ctx\n     .get(listenerCtx)\n     .beforeMount((ctx) => {\n       console.log('before the editor mounts')\n@@ -23,10 +23,8 @@\n       // useDebounce(nofifyUpdateFile('',markdown),1000)\n     })\n     .blur((ctx) => {\n       if (isFileChange) {\n-        console.log(file.content)\n-        console.log(file.filePath)\n         // window.api.updateFile({ filePath: file.filePath, newFileContent: file.content })\n         isFileChange = false\n       }\n       console.log(' editor loses focus')\n"
                }
            ],
            "date": 1666015314991,
            "name": "Commit-0",
            "content": "import { listenerCtx } from '@milkdown/plugin-listener'\n\nimport { Ctx } from '@milkdown/core'\nimport { useUpdateHeaders } from '@renderer/components/SideBar/hooks/useUpdateHeader'\n\nlet isFileChange = false\nexport const useConfig = (ctx: Ctx, file: { filePath: string; content: string }) => {\n  ctx\n    .get(listenerCtx)\n    .beforeMount((ctx) => {\n      console.log('before the editor mounts')\n    })\n    .mounted((ctx) => {\n      console.log('after the editor mounts')\n    })\n    .updated((ctx, doc, prevDoc) => {\n      isFileChange = true\n      console.log('when editor state updates')\n    })\n    .markdownUpdated((ctx, markdown, prevMarkdown) => {\n      console.log('when markdown updates')\n      useUpdateHeaders()\n      // useDebounce(nofifyUpdateFile('',markdown),1000)\n    })\n    .blur((ctx) => {\n      if (isFileChange) {\n        console.log(file.content)\n        console.log(file.filePath)\n        // window.api.updateFile({ filePath: file.filePath, newFileContent: file.content })\n        isFileChange = false\n      }\n      console.log(' editor loses focus')\n    })\n    .focus((ctx) => {\n      // console.log(' when focus editor')\n    })\n    .destroy((ctx) => {\n      console.log('when editor is being destroyed')\n    })\n}\n"
        }
    ]
}
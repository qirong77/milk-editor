{
    "sourceFile": "src/main/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1665388140026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1665388227542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,16 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-\n+  ipcMain.on('min', e => mainWindow.minimize())\n+  ipcMain.on('max', e => {\n+    if (mainWindow.isMaximized()) {\n+      mainWindow.unmaximize()\n+    } else {\n+      mainWindow.maximize()\n+    }\n+  })\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
                },
                {
                    "date": 1665388238818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { app, shell, BrowserWindow } from 'electron'\n+import { app, shell, BrowserWindow ,Ipc} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n \n function createWindow(): void {\n"
                },
                {
                    "date": 1665388281998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { app, shell, BrowserWindow ,Ipc} from 'electron'\n+import { app, shell, BrowserWindow ,ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n \n function createWindow(): void {\n@@ -18,8 +18,10 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n+\n+  // \n   ipcMain.on('min', e => mainWindow.minimize())\n   ipcMain.on('max', e => {\n     if (mainWindow.isMaximized()) {\n       mainWindow.unmaximize()\n"
                },
                {
                    "date": 1665388291201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       sandbox: false\n     }\n   })\n \n-  // \n+  // 监听放大缩小的按键\n   ipcMain.on('min', e => mainWindow.minimize())\n   ipcMain.on('max', e => {\n     if (mainWindow.isMaximized()) {\n       mainWindow.unmaximize()\n"
                },
                {
                    "date": 1665388330866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n     } else {\n       mainWindow.maximize()\n     }\n   })\n+  \n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
                },
                {
                    "date": 1665388377023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n+    // \n+    frame: false,\n     autoHideMenuBar: true,\n     ...(process.platform === 'linux'\n       ? {\n           icon: path.join(__dirname, '../../build/icon.png')\n@@ -28,9 +30,9 @@\n     } else {\n       mainWindow.maximize()\n     }\n   })\n-  \n+\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
                },
                {
                    "date": 1665388385919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n-    // \n+    // 关闭默认的上面那栏\n     frame: false,\n     autoHideMenuBar: true,\n     ...(process.platform === 'linux'\n       ? {\n"
                },
                {
                    "date": 1665390158841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     } else {\n       mainWindow.maximize()\n     }\n   })\n+  ipcMain.on('close', e => mainWindow.close())\n \n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n"
                }
            ],
            "date": 1665388140026,
            "name": "Commit-0",
            "content": "import { app, shell, BrowserWindow } from 'electron'\nimport * as path from 'path'\nimport { electronApp, optimizer, is } from '@electron-toolkit/utils'\n\nfunction createWindow(): void {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 900,\n    height: 670,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === 'linux'\n      ? {\n          icon: path.join(__dirname, '../../build/icon.png')\n        }\n      : {}),\n    webPreferences: {\n      preload: path.join(__dirname, '../preload/index.js'),\n      sandbox: false\n    }\n  })\n\n  mainWindow.on('ready-to-show', () => {\n    mainWindow.show()\n  })\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url)\n    return { action: 'deny' }\n  })\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n  } else {\n    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n  }\n}\n\n\n\n\n\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId('com.electron')\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on('browser-window-created', (_, window) => {\n    optimizer.watchWindowShortcuts(window)\n  })\n\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"
        }
    ]
}
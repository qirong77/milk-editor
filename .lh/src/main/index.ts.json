{
    "sourceFile": "src/main/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1669999432561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1670001500864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,12 @@\n-import { app, shell, BrowserWindow } from 'electron'\n-import * as path from 'path'\n-import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import { app, BrowserWindow } from 'electron'\n \n-function createWindow(): void {\n-  // Create the browser window.\n-  const mainWindow = new BrowserWindow({\n-    width: 900,\n-    height: 670,\n-    show: false,\n-    autoHideMenuBar: true,\n-    ...(process.platform === 'linux'\n-      ? {\n-          icon: path.join(__dirname, '../../build/icon.png')\n-        }\n-      : {}),\n-    webPreferences: {\n-      preload: path.join(__dirname, '../preload/index.js'),\n-      sandbox: false\n-    }\n-  })\n+import { electronApp, optimizer } from '@electron-toolkit/utils'\n+import { createWindow } from './electron/createWindow'\n+import { UPDATE_DIR_TREE } from '../common/eventType'\n+import { getDirectoryTree } from './events/helper/getDirectoryTree'\n+import { defaultPath } from './config'\n \n-  mainWindow.on('ready-to-show', () => {\n-    mainWindow.show()\n-  })\n-  mainWindow.webContents.setWindowOpenHandler((details) => {\n-    shell.openExternal(details.url)\n-    return { action: 'deny' }\n-  })\n-\n-  // HMR for renderer base on electron-vite cli.\n-  // Load the remote URL for development or the local html file for production.\n-  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n-    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n-  } else {\n-    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n-  }\n-}\n-\n // This method will be called when Electron has finished\n // initialization and is ready to create browser windows.\n // Some APIs can only be used after this event occurs.\n app.whenReady().then(() => {\n@@ -50,10 +19,10 @@\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n   })\n \n-  createWindow()\n-\n+  const window = createWindow()\n+  window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n   app.on('activate', function () {\n     // On macOS it's common to re-create a window in the app when the\n     // dock icon is clicked and there are no other windows open.\n     if (BrowserWindow.getAllWindows().length === 0) createWindow()\n"
                },
                {
                    "date": 1670004024101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,11 @@\n     optimizer.watchWindowShortcuts(window)\n   })\n \n   const window = createWindow()\n-  window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n+  setInterval(()=>{\n+    window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n+  },1000)\n   app.on('activate', function () {\n     // On macOS it's common to re-create a window in the app when the\n     // dock icon is clicked and there are no other windows open.\n     if (BrowserWindow.getAllWindows().length === 0) createWindow()\n"
                },
                {
                    "date": 1670058082844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,10 @@\n     optimizer.watchWindowShortcuts(window)\n   })\n \n   const window = createWindow()\n-  setInterval(()=>{\n+  app.on('activate', function () {\n     window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n-  },1000)\n-  app.on('activate', function () {\n     // On macOS it's common to re-create a window in the app when the\n     // dock icon is clicked and there are no other windows open.\n     if (BrowserWindow.getAllWindows().length === 0) createWindow()\n   })\n"
                },
                {
                    "date": 1670058103445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,19 +11,20 @@\n // Some APIs can only be used after this event occurs.\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n+  const window = createWindow()\n \n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n+    window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n+\n   })\n \n-  const window = createWindow()\n   app.on('activate', function () {\n-    window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n     // On macOS it's common to re-create a window in the app when the\n     // dock icon is clicked and there are no other windows open.\n     if (BrowserWindow.getAllWindows().length === 0) createWindow()\n   })\n"
                },
                {
                    "date": 1670058168653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,17 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n+setTimeout(()=>{\n+  window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n \n+},3000)\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n-    window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n \n   })\n \n   app.on('activate', function () {\n"
                },
                {
                    "date": 1670058702132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,18 +12,16 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n-setTimeout(()=>{\n-  window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n-\n-},3000)\n+  setTimeout(() => {\n+    window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n+  }, 2000)\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n-\n   })\n \n   app.on('activate', function () {\n     // On macOS it's common to re-create a window in the app when the\n"
                },
                {
                    "date": 1670133712251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n-  setTimeout(() => {\n+  setInterval(() => {\n     window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n   }, 2000)\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n"
                },
                {
                    "date": 1670133747100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n   setInterval(() => {\n     window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n-  }, 2000)\n+  }, 3000)\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n"
                },
                {
                    "date": 1670133752770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n-  setInterval(() => {\n+  setTimeout(() => {\n     window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n   }, 3000)\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n"
                },
                {
                    "date": 1670133775962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n   setTimeout(() => {\n     window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n-  }, 3000)\n+  }, 5000)\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n"
                },
                {
                    "date": 1670133991358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n-  setTimeout(() => {\n-    window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n-  }, 5000)\n+  // setTimeout(() => {\n+  //   window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n+  // }, 5000)\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n"
                },
                {
                    "date": 1670134373565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,18 @@\n import { app, BrowserWindow } from 'electron'\n \n import { electronApp, optimizer } from '@electron-toolkit/utils'\n import { createWindow } from './electron/createWindow'\n-import { UPDATE_DIR_TREE } from '../common/eventType'\n-import { getDirectoryTree } from './events/helper/getDirectoryTree'\n-import { defaultPath } from './config'\n+import { onEvents } from './events'\n \n // This method will be called when Electron has finished\n // initialization and is ready to create browser windows.\n // Some APIs can only be used after this event occurs.\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n-  // setTimeout(() => {\n-  //   window.webContents.send(UPDATE_DIR_TREE, getDirectoryTree(defaultPath))\n-  // }, 5000)\n+  onEvents()\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n"
                },
                {
                    "date": 1670134397533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n-  onEvents()\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n@@ -21,8 +20,10 @@\n \n   app.on('activate', function () {\n     // On macOS it's common to re-create a window in the app when the\n     // dock icon is clicked and there are no other windows open.\n+  onEvents()\n+\n     if (BrowserWindow.getAllWindows().length === 0) createWindow()\n   })\n })\n \n"
                },
                {
                    "date": 1670134454976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n+  onEvents()\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n@@ -20,9 +21,8 @@\n \n   app.on('activate', function () {\n     // On macOS it's common to re-create a window in the app when the\n     // dock icon is clicked and there are no other windows open.\n-  onEvents()\n \n     if (BrowserWindow.getAllWindows().length === 0) createWindow()\n   })\n })\n"
                },
                {
                    "date": 1670134519864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   const window = createWindow()\n-  onEvents()\n+\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n"
                },
                {
                    "date": 1670134561171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n // Some APIs can only be used after this event occurs.\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n-  const window = createWindow()\n+  createWindow()\n \n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n"
                },
                {
                    "date": 1670134570162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n   createWindow()\n-\n+onEvents()\n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n"
                }
            ],
            "date": 1669999432561,
            "name": "Commit-0",
            "content": "import { app, shell, BrowserWindow } from 'electron'\nimport * as path from 'path'\nimport { electronApp, optimizer, is } from '@electron-toolkit/utils'\n\nfunction createWindow(): void {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 900,\n    height: 670,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === 'linux'\n      ? {\n          icon: path.join(__dirname, '../../build/icon.png')\n        }\n      : {}),\n    webPreferences: {\n      preload: path.join(__dirname, '../preload/index.js'),\n      sandbox: false\n    }\n  })\n\n  mainWindow.on('ready-to-show', () => {\n    mainWindow.show()\n  })\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url)\n    return { action: 'deny' }\n  })\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n  } else {\n    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n  }\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId('com.electron')\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on('browser-window-created', (_, window) => {\n    optimizer.watchWindowShortcuts(window)\n  })\n\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"
        }
    ]
}
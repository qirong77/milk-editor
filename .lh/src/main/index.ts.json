{
  "sourceFile": "src/main/index.ts",
  "activeCommit": 0,
  "commits": [
    {
      "activePatchIndex": 59,
      "patches": [
        {
          "date": 1665388140026,
          "content": "Index: \n===================================================================\n--- \n+++ \n"
        },
        {
          "date": 1665388227542,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,16 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-\n+  ipcMain.on('min', e => mainWindow.minimize())\n+  ipcMain.on('max', e => {\n+    if (mainWindow.isMaximized()) {\n+      mainWindow.unmaximize()\n+    } else {\n+      mainWindow.maximize()\n+    }\n+  })\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
        },
        {
          "date": 1665388238818,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { app, shell, BrowserWindow } from 'electron'\n+import { app, shell, BrowserWindow ,Ipc} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n \n function createWindow(): void {\n"
        },
        {
          "date": 1665388281998,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { app, shell, BrowserWindow ,Ipc} from 'electron'\n+import { app, shell, BrowserWindow ,ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n \n function createWindow(): void {\n@@ -18,8 +18,10 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n+\n+  // \n   ipcMain.on('min', e => mainWindow.minimize())\n   ipcMain.on('max', e => {\n     if (mainWindow.isMaximized()) {\n       mainWindow.unmaximize()\n"
        },
        {
          "date": 1665388291201,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       sandbox: false\n     }\n   })\n \n-  // \n+  // 监听放大缩小的按键\n   ipcMain.on('min', e => mainWindow.minimize())\n   ipcMain.on('max', e => {\n     if (mainWindow.isMaximized()) {\n       mainWindow.unmaximize()\n"
        },
        {
          "date": 1665388330866,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n     } else {\n       mainWindow.maximize()\n     }\n   })\n+  \n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
        },
        {
          "date": 1665388377023,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n+    // \n+    frame: false,\n     autoHideMenuBar: true,\n     ...(process.platform === 'linux'\n       ? {\n           icon: path.join(__dirname, '../../build/icon.png')\n@@ -28,9 +30,9 @@\n     } else {\n       mainWindow.maximize()\n     }\n   })\n-  \n+\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
        },
        {
          "date": 1665388385919,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n-    // \n+    // 关闭默认的上面那栏\n     frame: false,\n     autoHideMenuBar: true,\n     ...(process.platform === 'linux'\n       ? {\n"
        },
        {
          "date": 1665390158841,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     } else {\n       mainWindow.maximize()\n     }\n   })\n+  ipcMain.on('close', e => mainWindow.close())\n \n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n"
        },
        {
          "date": 1665546422090,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n         }\n       : {}),\n     webPreferences: {\n       preload: path.join(__dirname, '../preload/index.js'),\n-      sandbox: false\n+      // 默认是true的，这个框架把他搞成false了\n+      sandbox: true\n     }\n   })\n \n   // 监听放大缩小的按键\n"
        },
        {
          "date": 1665551113113,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { app, shell, BrowserWindow ,ipcMain} from 'electron'\n+import { app, shell, BrowserWindow, ipcMain } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n \n function createWindow(): void {\n@@ -22,19 +22,8 @@\n       sandbox: true\n     }\n   })\n \n-  // 监听放大缩小的按键\n-  ipcMain.on('min', e => mainWindow.minimize())\n-  ipcMain.on('max', e => {\n-    if (mainWindow.isMaximized()) {\n-      mainWindow.unmaximize()\n-    } else {\n-      mainWindow.maximize()\n-    }\n-  })\n-  ipcMain.on('close', e => mainWindow.close())\n-\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n@@ -51,25 +40,30 @@\n     mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n   }\n }\n \n-\n-\n-\n-\n-\n // This method will be called when Electron has finished\n // initialization and is ready to create browser windows.\n // Some APIs can only be used after this event occurs.\n app.whenReady().then(() => {\n+\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n \n   // Default open or close DevTools by F12 in development\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n+    ipcMain.on('min', (e) => window.minimize())\n+    ipcMain.on('max', (e) => {\n+      if (window.isMaximized()) {\n+        window.unmaximize()\n+      } else {\n+        window.maximize()\n+      }\n+    })\n+    ipcMain.on('close', (e) => window.close())\n   })\n \n   createWindow()\n \n"
        },
        {
          "date": 1665551156072,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,9 @@\n         }\n       : {}),\n     webPreferences: {\n       preload: path.join(__dirname, '../preload/index.js'),\n-      // 默认是true的，这个框架把他搞成false了\n-      sandbox: true\n+      sandbox: false\n     }\n   })\n \n   mainWindow.on('ready-to-show', () => {\n"
        },
        {
          "date": 1665551683973,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { app, shell, BrowserWindow, ipcMain } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n \n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n@@ -52,17 +53,17 @@\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n-    ipcMain.on('min', (e) => window.minimize())\n-    ipcMain.on('max', (e) => {\n+    ipcMain.on(MIN_SCREEN, (e) => window.minimize())\n+    ipcMain.on(MAX_SCREEN, (e) => {\n       if (window.isMaximized()) {\n         window.unmaximize()\n       } else {\n         window.maximize()\n       }\n     })\n-    ipcMain.on('close', (e) => window.close())\n+    ipcMain.on(CLOSE_SCREEN, (e) => window.close())\n   })\n \n   createWindow()\n \n"
        },
        {
          "date": 1665552331801,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { app, shell, BrowserWindow, ipcMain } from 'electron'\n+import { app, shell, BrowserWindow, ipcMain, Menu } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n \n@@ -40,13 +40,29 @@\n     mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n   }\n }\n \n+function setMainMenu() {\n+  const template = [\n+    {\n+      label: 'Filter',\n+      submenu: [\n+        {\n+          label: 'Hello',\n+          accelerator: 'Shift+CmdOrCtrl+H',\n+          click() {\n+            console.log('Oh, hi there!')\n+          }\n+        }\n+      ]\n+    }\n+  ]\n+  Menu.setApplicationMenu(Menu.buildFromTemplate(template))\n+}\n // This method will be called when Electron has finished\n // initialization and is ready to create browser windows.\n // Some APIs can only be used after this event occurs.\n app.whenReady().then(() => {\n-\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n \n   // Default open or close DevTools by F12 in development\n@@ -62,8 +78,9 @@\n         window.maximize()\n       }\n     })\n     ipcMain.on(CLOSE_SCREEN, (e) => window.close())\n+    setMainMenu()\n   })\n \n   createWindow()\n \n"
        },
        {
          "date": 1665552455832,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,13 +46,14 @@\n     {\n       label: 'Filter',\n       submenu: [\n         {\n-          label: 'Hello',\n+          label: '文件',\n+          // 辅助图标，不是真的快捷键\n           accelerator: 'Shift+CmdOrCtrl+H',\n           click() {\n             console.log('Oh, hi there!')\n-          }\n+          },\n         }\n       ]\n     }\n   ]\n"
        },
        {
          "date": 1665555397840,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,10 @@\n         }\n       ]\n     }\n   ]\n-  Menu.setApplicationMenu(Menu.buildFromTemplate(template))\n+  const newMenu = Menu.buildFromTemplate(template)\n+  Menu.setApplicationMenu(newMenu)\n }\n // This method will be called when Electron has finished\n // initialization and is ready to create browser windows.\n // Some APIs can only be used after this event occurs.\n"
        },
        {
          "date": 1665563145555,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,17 +71,17 @@\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n-    ipcMain.on(MIN_SCREEN, (e) => window.minimize())\n-    ipcMain.on(MAX_SCREEN, (e) => {\n+    ipcMain.on(MIN_SCREEN, () => window.minimize())\n+    ipcMain.on(MAX_SCREEN, () => {\n       if (window.isMaximized()) {\n         window.unmaximize()\n       } else {\n         window.maximize()\n       }\n     })\n-    ipcMain.on(CLOSE_SCREEN, (e) => window.close())\n+    ipcMain.on(CLOSE_SCREEN, () => window.close())\n     setMainMenu()\n   })\n \n   createWindow()\n"
        },
        {
          "date": 1665565947311,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n \n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n-\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n     shell.openExternal(details.url)\n     return { action: 'deny' }\n   })\n@@ -41,25 +40,24 @@\n   }\n }\n \n function setMainMenu() {\n-  const template = [\n+  const menu = Menu.buildFromTemplate([\n     {\n-      label: 'Filter',\n+      label: app.name,\n       submenu: [\n         {\n-          label: '文件',\n-          // 辅助图标，不是真的快捷键\n-          accelerator: 'Shift+CmdOrCtrl+H',\n-          click() {\n-            console.log('Oh, hi there!')\n-          },\n+          click: () => {},\n+          label: 'Increment',\n+        },\n+        {\n+          click: () => {},\n+          label: 'Decrement',\n         }\n       ]\n     }\n-  ]\n-  const newMenu = Menu.buildFromTemplate(template)\n-  Menu.setApplicationMenu(newMenu)\n+  ])\n+  Menu.setApplicationMenu(menu)\n }\n // This method will be called when Electron has finished\n // initialization and is ready to create browser windows.\n // Some APIs can only be used after this event occurs.\n"
        },
        {
          "date": 1665566017028,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,21 @@\n           click: () => {},\n           label: 'Decrement',\n         }\n       ]\n+    },\n+    {\n+      label: app.name,\n+      submenu: [\n+        {\n+          click: () => {},\n+          label: 'Increment',\n+        },\n+        {\n+          click: () => {},\n+          label: 'Decrement',\n+        }\n+      ]\n     }\n   ])\n   Menu.setApplicationMenu(menu)\n }\n"
        },
        {
          "date": 1665566033654,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,21 @@\n           click: () => {},\n           label: 'Decrement',\n         }\n       ]\n+    },\n+    {\n+      label: app.name,\n+      submenu: [\n+        {\n+          click: () => {},\n+          label: 'Increment',\n+        },\n+        {\n+          click: () => {},\n+          label: 'Decrement',\n+        }\n+      ]\n     }\n   ])\n   Menu.setApplicationMenu(menu)\n }\n"
        },
        {
          "date": 1665566455088,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,17 +68,19 @@\n         }\n       ]\n     },\n     {\n-      label: app.name,\n+      label: '文件',\n       submenu: [\n         {\n           click: () => {},\n-          label: 'Increment',\n+          label: '新建',\n+          accelerator: 'Shift+CmdOrCtrl+H',\n         },\n         {\n           click: () => {},\n-          label: 'Decrement',\n+          label: '新建标签页',\n+          accelerator: 'Shift+CmdOrCtrl+H',\n         }\n       ]\n     }\n   ])\n"
        },
        {
          "date": 1665566499879,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,35 +55,40 @@\n         }\n       ]\n     },\n     {\n-      label: app.name,\n+      label: '文件',\n       submenu: [\n         {\n           click: () => {},\n-          label: 'Increment',\n+          label: '新建',\n+          accelerator: 'Shift+CmdOrCtrl+H',\n         },\n         {\n           click: () => {},\n-          label: 'Decrement',\n+          label: '新建标签页',\n+          accelerator: 'Shift+CmdOrCtrl+H',\n+        },\n+        {\n+          label:'打开',\n+          click:()=>{},\n         }\n       ]\n-    },\n+    }\n     {\n-      label: '文件',\n+      label: app.name,\n       submenu: [\n         {\n           click: () => {},\n-          label: '新建',\n-          accelerator: 'Shift+CmdOrCtrl+H',\n+          label: 'Increment',\n         },\n         {\n           click: () => {},\n-          label: '新建标签页',\n-          accelerator: 'Shift+CmdOrCtrl+H',\n+          label: 'Decrement',\n         }\n       ]\n-    }\n+    },\n+\n   ])\n   Menu.setApplicationMenu(menu)\n }\n // This method will be called when Electron has finished\n"
        },
        {
          "date": 1665566520001,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n           label:'打开',\n           click:()=>{},\n         }\n       ]\n-    }\n+    },\n     {\n       label: app.name,\n       submenu: [\n         {\n"
        },
        {
          "date": 1665566526455,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,13 +46,13 @@\n       label: app.name,\n       submenu: [\n         {\n           click: () => {},\n-          label: 'Increment',\n+          label: 'Increment'\n         },\n         {\n           click: () => {},\n-          label: 'Decrement',\n+          label: 'Decrement'\n         }\n       ]\n     },\n     {\n@@ -60,35 +60,34 @@\n       submenu: [\n         {\n           click: () => {},\n           label: '新建',\n-          accelerator: 'Shift+CmdOrCtrl+H',\n+          accelerator: 'Shift+CmdOrCtrl+H'\n         },\n         {\n           click: () => {},\n           label: '新建标签页',\n-          accelerator: 'Shift+CmdOrCtrl+H',\n+          accelerator: 'Shift+CmdOrCtrl+H'\n         },\n         {\n-          label:'打开',\n-          click:()=>{},\n+          label: '打开',\n+          click: () => {}\n         }\n       ]\n     },\n     {\n       label: app.name,\n       submenu: [\n         {\n           click: () => {},\n-          label: 'Increment',\n+          label: 'Increment'\n         },\n         {\n           click: () => {},\n-          label: 'Decrement',\n+          label: 'Decrement'\n         }\n       ]\n-    },\n-\n+    }\n   ])\n   Menu.setApplicationMenu(menu)\n }\n // This method will be called when Electron has finished\n"
        },
        {
          "date": 1665586835865,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-import { app, shell, BrowserWindow, ipcMain, Menu } from 'electron'\n+import { app, shell, BrowserWindow, ipcMain, Menu, dialog } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n-\n+let window:BrowserWindow\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n@@ -21,9 +21,9 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-\n+  window = mainWindow\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n@@ -38,9 +38,16 @@\n   } else {\n     mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n   }\n }\n-\n+async function openFileSelector(window:BrowserWindow) {\n+  const { canceled, filePaths } = await dialog.showOpenDialog(window)\n+  if (canceled) {\n+    return\n+  } else {\n+    return filePaths[0]\n+  }\n+}\n function setMainMenu() {\n   const menu = Menu.buildFromTemplate([\n     {\n       label: app.name,\n@@ -69,9 +76,9 @@\n           accelerator: 'Shift+CmdOrCtrl+H'\n         },\n         {\n           label: '打开',\n-          click: () => {}\n+          click: ()=>{openFileSelector(window)}\n         }\n       ]\n     },\n     {\n"
        },
        {
          "date": 1665587652699,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import { app, shell, BrowserWindow, ipcMain, Menu, dialog } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n-let window:BrowserWindow\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n@@ -21,9 +20,8 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  window = mainWindow\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n"
        },
        {
          "date": 1665587767708,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,33 +20,8 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  mainWindow.on('ready-to-show', () => {\n-    mainWindow.show()\n-  })\n-  mainWindow.webContents.setWindowOpenHandler((details) => {\n-    shell.openExternal(details.url)\n-    return { action: 'deny' }\n-  })\n-\n-  // HMR for renderer base on electron-vite cli.\n-  // Load the remote URL for development or the local html file for production.\n-  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n-    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n-  } else {\n-    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n-  }\n-}\n-async function openFileSelector(window:BrowserWindow) {\n-  const { canceled, filePaths } = await dialog.showOpenDialog(window)\n-  if (canceled) {\n-    return\n-  } else {\n-    return filePaths[0]\n-  }\n-}\n-function setMainMenu() {\n   const menu = Menu.buildFromTemplate([\n     {\n       label: app.name,\n       submenu: [\n@@ -74,9 +49,9 @@\n           accelerator: 'Shift+CmdOrCtrl+H'\n         },\n         {\n           label: '打开',\n-          click: ()=>{openFileSelector(window)}\n+          click: ()=>{openFileSelector(mainWindow)}\n         }\n       ]\n     },\n     {\n@@ -93,9 +68,32 @@\n       ]\n     }\n   ])\n   Menu.setApplicationMenu(menu)\n+  mainWindow.on('ready-to-show', () => {\n+    mainWindow.show()\n+  })\n+  mainWindow.webContents.setWindowOpenHandler((details) => {\n+    shell.openExternal(details.url)\n+    return { action: 'deny' }\n+  })\n+\n+  // HMR for renderer base on electron-vite cli.\n+  // Load the remote URL for development or the local html file for production.\n+  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n+    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n+  } else {\n+    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n+  }\n }\n+async function openFileSelector(window:BrowserWindow) {\n+  const { canceled, filePaths } = await dialog.showOpenDialog(window)\n+  if (canceled) {\n+    return\n+  } else {\n+    return filePaths[0]\n+  }\n+}\n // This method will be called when Electron has finished\n // initialization and is ready to create browser windows.\n // Some APIs can only be used after this event occurs.\n app.whenReady().then(() => {\n@@ -115,9 +113,8 @@\n         window.maximize()\n       }\n     })\n     ipcMain.on(CLOSE_SCREEN, () => window.close())\n-    setMainMenu()\n   })\n \n   createWindow()\n \n"
        },
        {
          "date": 1665587851227,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { app, shell, BrowserWindow, ipcMain, Menu, dialog } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n+import { openFileSelector } from './utils'\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n@@ -84,16 +85,9 @@\n   } else {\n     mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n   }\n }\n-async function openFileSelector(window:BrowserWindow) {\n-  const { canceled, filePaths } = await dialog.showOpenDialog(window)\n-  if (canceled) {\n-    return\n-  } else {\n-    return filePaths[0]\n-  }\n-}\n+\n // This method will be called when Electron has finished\n // initialization and is ready to create browser windows.\n // Some APIs can only be used after this event occurs.\n app.whenReady().then(() => {\n"
        },
        {
          "date": 1665587858398,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { app, shell, BrowserWindow, ipcMain, Menu, dialog } from 'electron'\n+import { app, shell, BrowserWindow, ipcMain, Menu} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n import { openFileSelector } from './utils'\n"
        },
        {
          "date": 1665588094594,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,12 @@\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n import { openFileSelector } from './utils'\n+const openFile = async (window:BrowserWindow) =>{\n+  const path = await openFileSelector(window)\n+  console.log(path)\n+}\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n@@ -50,9 +54,9 @@\n           accelerator: 'Shift+CmdOrCtrl+H'\n         },\n         {\n           label: '打开',\n-          click: ()=>{openFileSelector(mainWindow)}\n+          click: ()=>{openFile(mainWindow)}\n         }\n       ]\n     },\n     {\n"
        },
        {
          "date": 1665588137444,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n import { openFileSelector } from './utils'\n const openFile = async (window:BrowserWindow) =>{\n+  console.log('p')\n   const path = await openFileSelector(window)\n   console.log(path)\n }\n function createWindow(): void {\n"
        },
        {
          "date": 1665588143549,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n import { openFileSelector } from './utils'\n const openFile = async (window:BrowserWindow) =>{\n-  console.log('p')\n   const path = await openFileSelector(window)\n   console.log(path)\n }\n function createWindow(): void {\n"
        },
        {
          "date": 1665588843261,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,18 @@\n import { app, shell, BrowserWindow, ipcMain, Menu} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n-import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n+import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN, UPDATE_CONTENT } from './constant'\n import { openFileSelector } from './utils'\n+import { readFileSync } from 'fs'\n const openFile = async (window:BrowserWindow) =>{\n-  const path = await openFileSelector(window)\n-  console.log(path)\n+  const paths = await openFileSelector(window)\n+  if(paths) {\n+    const path = paths[0]\n+    const content = readFileSync(path,'utf-8')\n+    window.webContents.send(UPDATE_CONTENT,content)\n+  }\n+\n }\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n"
        },
        {
          "date": 1665592653149,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n   if(paths) {\n     const path = paths[0]\n     const content = readFileSync(path,'utf-8')\n     window.webContents.send(UPDATE_CONTENT,content)\n-  }\n+  } \n+}\n \n-}\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n"
        },
        {
          "date": 1665644473689,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,10 @@\n import { app, shell, BrowserWindow, ipcMain, Menu} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n-import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN, UPDATE_CONTENT } from './constant'\n-import { openFileSelector } from './utils'\n-import { readFileSync } from 'fs'\n-const openFile = async (window:BrowserWindow) =>{\n-  const paths = await openFileSelector(window)\n-  if(paths) {\n-    const path = paths[0]\n-    const content = readFileSync(path,'utf-8')\n-    window.webContents.send(UPDATE_CONTENT,content)\n-  } \n-}\n+import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n \n+\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n@@ -31,56 +22,9 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  const menu = Menu.buildFromTemplate([\n-    {\n-      label: app.name,\n-      submenu: [\n-        {\n-          click: () => {},\n-          label: 'Increment'\n-        },\n-        {\n-          click: () => {},\n-          label: 'Decrement'\n-        }\n-      ]\n-    },\n-    {\n-      label: '文件',\n-      submenu: [\n-        {\n-          click: () => {},\n-          label: '新建',\n-          accelerator: 'Shift+CmdOrCtrl+H'\n-        },\n-        {\n-          click: () => {},\n-          label: '新建标签页',\n-          accelerator: 'Shift+CmdOrCtrl+H'\n-        },\n-        {\n-          label: '打开',\n-          click: ()=>{openFile(mainWindow)}\n-        }\n-      ]\n-    },\n-    {\n-      label: app.name,\n-      submenu: [\n-        {\n-          click: () => {},\n-          label: 'Increment'\n-        },\n-        {\n-          click: () => {},\n-          label: 'Decrement'\n-        }\n-      ]\n-    }\n-  ])\n-  Menu.setApplicationMenu(menu)\n+\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n"
        },
        {
          "date": 1665645545134,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n-import { app, shell, BrowserWindow, ipcMain, Menu} from 'electron'\n+import { app, shell, BrowserWindow, ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n-import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n \n \n+\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n@@ -22,17 +22,15 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n     shell.openExternal(details.url)\n     return { action: 'deny' }\n   })\n-\n   // HMR for renderer base on electron-vite cli.\n   // Load the remote URL for development or the local html file for production.\n   if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n     mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n"
        },
        {
          "date": 1665646145182,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import { app, shell, BrowserWindow, ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n+import { useMenu } from './useMenu'\n \n \n \n function createWindow(): void {\n@@ -22,8 +24,9 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n+  useMenu(mainWindow)\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n"
        },
        {
          "date": 1665649907187,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,14 @@\n-import { app, shell, BrowserWindow, ipcMain} from 'electron'\n+import { app, shell, BrowserWindow } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n-import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n-import { useMenu } from './useMenu'\n \n-\n-\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n-    // 关闭默认的上面那栏\n-    frame: false,\n     autoHideMenuBar: true,\n     ...(process.platform === 'linux'\n       ? {\n           icon: path.join(__dirname, '../../build/icon.png')\n@@ -24,16 +18,18 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  useMenu(mainWindow)\n+\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n+\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n     shell.openExternal(details.url)\n     return { action: 'deny' }\n   })\n+\n   // HMR for renderer base on electron-vite cli.\n   // Load the remote URL for development or the local html file for production.\n   if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n     mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n@@ -53,17 +49,8 @@\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n-    ipcMain.on(MIN_SCREEN, () => window.minimize())\n-    ipcMain.on(MAX_SCREEN, () => {\n-      if (window.isMaximized()) {\n-        window.unmaximize()\n-      } else {\n-        window.maximize()\n-      }\n-    })\n-    ipcMain.on(CLOSE_SCREEN, () => window.close())\n   })\n \n   createWindow()\n \n"
        },
        {
          "date": 1665650037320,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,20 @@\n-import { app, shell, BrowserWindow } from 'electron'\n+import { app, shell, BrowserWindow, ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n+import { useMenu } from './useMenu'\n \n+\n+\n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n+    // 关闭默认的上面那栏\n+    frame: false,\n     autoHideMenuBar: true,\n     ...(process.platform === 'linux'\n       ? {\n           icon: path.join(__dirname, '../../build/icon.png')\n@@ -18,18 +24,16 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-\n+  useMenu(mainWindow)\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n-\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n     shell.openExternal(details.url)\n     return { action: 'deny' }\n   })\n-\n   // HMR for renderer base on electron-vite cli.\n   // Load the remote URL for development or the local html file for production.\n   if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n     mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n@@ -49,8 +53,17 @@\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n+    ipcMain.on(MIN_SCREEN, () => window.minimize())\n+    ipcMain.on(MAX_SCREEN, () => {\n+      if (window.isMaximized()) {\n+        window.unmaximize()\n+      } else {\n+        window.maximize()\n+      }\n+    })\n+    ipcMain.on(CLOSE_SCREEN, () => window.close())\n   })\n \n   createWindow()\n \n"
        },
        {
          "date": 1665650070944,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  useMenu(mainWindow)\n+  // useMenu(mainWindow)\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n"
        },
        {
          "date": 1665650099440,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,83 @@\n+```typescript\n+import { app, shell, BrowserWindow } from 'electron'\n+import * as path from 'path'\n+import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+\n+function createWindow(): void {\n+  // Create the browser window.\n+  const mainWindow = new BrowserWindow({\n+    width: 900,\n+    height: 670,\n+    show: false,\n+    autoHideMenuBar: true,\n+    ...(process.platform === 'linux'\n+      ? {\n+          icon: path.join(__dirname, '../../build/icon.png')\n+        }\n+      : {}),\n+    webPreferences: {\n+      preload: path.join(__dirname, '../preload/index.js'),\n+      sandbox: false\n+    }\n+  })\n+\n+  mainWindow.on('ready-to-show', () => {\n+    mainWindow.show()\n+  })\n+\n+  mainWindow.webContents.setWindowOpenHandler((details) => {\n+    shell.openExternal(details.url)\n+    return { action: 'deny' }\n+  })\n+\n+  // HMR for renderer base on electron-vite cli.\n+  // Load the remote URL for development or the local html file for production.\n+  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n+    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n+  } else {\n+    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n+  }\n+}\n+\n+// This method will be called when Electron has finished\n+// initialization and is ready to create browser windows.\n+// Some APIs can only be used after this event occurs.\n+app.whenReady().then(() => {\n+  // Set app user model id for windows\n+  electronApp.setAppUserModelId('com.electron')\n+\n+  // Default open or close DevTools by F12 in development\n+  // and ignore CommandOrControl + R in production.\n+  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n+  app.on('browser-window-created', (_, window) => {\n+    optimizer.watchWindowShortcuts(window)\n+  })\n+\n+  createWindow()\n+\n+  app.on('activate', function () {\n+    // On macOS it's common to re-create a window in the app when the\n+    // dock icon is clicked and there are no other windows open.\n+    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n+  })\n+})\n+\n+// Quit when all windows are closed, except on macOS. There, it's common\n+// for applications and their menu bar to stay active until the user quits\n+// explicitly with Cmd + Q.\n+app.on('window-all-closed', () => {\n+  if (process.platform !== 'darwin') {\n+    app.quit()\n+  }\n+})\n+\n+// In this file you can include the rest of your app\"s specific main process\n+// code. You can also put them in separate files and require them here.\n+\n+```\n+\n+```typescript\n import { app, shell, BrowserWindow, ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n@@ -24,9 +103,9 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  // useMenu(mainWindow)\n+  useMenu(mainWindow)\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n@@ -84,4 +163,9 @@\n })\n \n // In this file you can include the rest of your app\"s specific main process\n // code. You can also put them in separate files and require them here.\n+\n+```\n+\n+\n+\n"
        },
        {
          "date": 1665650126813,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-```typescript\n import { app, shell, BrowserWindow } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n \n@@ -71,101 +70,5 @@\n   }\n })\n \n // In this file you can include the rest of your app\"s specific main process\n-// code. You can also put them in separate files and require them here.\n-\n-```\n-\n-```typescript\n-import { app, shell, BrowserWindow, ipcMain} from 'electron'\n-import * as path from 'path'\n-import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n-import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n-import { useMenu } from './useMenu'\n-\n-\n-\n-function createWindow(): void {\n-  // Create the browser window.\n-  const mainWindow = new BrowserWindow({\n-    width: 900,\n-    height: 670,\n-    show: false,\n-    // 关闭默认的上面那栏\n-    frame: false,\n-    autoHideMenuBar: true,\n-    ...(process.platform === 'linux'\n-      ? {\n-          icon: path.join(__dirname, '../../build/icon.png')\n-        }\n-      : {}),\n-    webPreferences: {\n-      preload: path.join(__dirname, '../preload/index.js'),\n-      sandbox: false\n-    }\n-  })\n-  useMenu(mainWindow)\n-  mainWindow.on('ready-to-show', () => {\n-    mainWindow.show()\n-  })\n-  mainWindow.webContents.setWindowOpenHandler((details) => {\n-    shell.openExternal(details.url)\n-    return { action: 'deny' }\n-  })\n-  // HMR for renderer base on electron-vite cli.\n-  // Load the remote URL for development or the local html file for production.\n-  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n-    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n-  } else {\n-    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n-  }\n-}\n-\n-// This method will be called when Electron has finished\n-// initialization and is ready to create browser windows.\n-// Some APIs can only be used after this event occurs.\n-app.whenReady().then(() => {\n-  // Set app user model id for windows\n-  electronApp.setAppUserModelId('com.electron')\n-\n-  // Default open or close DevTools by F12 in development\n-  // and ignore CommandOrControl + R in production.\n-  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n-  app.on('browser-window-created', (_, window) => {\n-    optimizer.watchWindowShortcuts(window)\n-    ipcMain.on(MIN_SCREEN, () => window.minimize())\n-    ipcMain.on(MAX_SCREEN, () => {\n-      if (window.isMaximized()) {\n-        window.unmaximize()\n-      } else {\n-        window.maximize()\n-      }\n-    })\n-    ipcMain.on(CLOSE_SCREEN, () => window.close())\n-  })\n-\n-  createWindow()\n-\n-  app.on('activate', function () {\n-    // On macOS it's common to re-create a window in the app when the\n-    // dock icon is clicked and there are no other windows open.\n-    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n-  })\n-})\n-\n-// Quit when all windows are closed, except on macOS. There, it's common\n-// for applications and their menu bar to stay active until the user quits\n-// explicitly with Cmd + Q.\n-app.on('window-all-closed', () => {\n-  if (process.platform !== 'darwin') {\n-    app.quit()\n-  }\n-})\n-\n-// In this file you can include the rest of your app\"s specific main process\n-// code. You can also put them in separate files and require them here.\n-\n-```\n-\n-\n-\n+// code. You can also put them in s\n\\ No newline at end of file\n"
        },
        {
          "date": 1665650180141,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { app, shell, BrowserWindow } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import { useMenu } from './useMenu'\n \n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n@@ -18,9 +19,9 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-\n+  useMenu()\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
        },
        {
          "date": 1665650190743,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  useMenu()\n+  // useMenu()\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
        },
        {
          "date": 1665650306411,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n-import { app, shell, BrowserWindow } from 'electron'\n+import { app, shell, BrowserWindow, Menu } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { useMenu } from './useMenu'\n \n function createWindow(): void {\n   // Create the browser window.\n+\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n@@ -19,9 +20,26 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  // useMenu()\n+  const useMenu = (window:BrowserWindow) => {\n+    const menu = Menu.buildFromTemplate([\n+        {\n+          label: app.name,\n+          submenu: [\n+            {\n+              click: () => {},\n+              label: 'Increment'\n+            },\n+            {\n+              click: () => {},\n+              label: 'Decrement'\n+            }\n+          ]\n+        },\n+       \n+      ])\n+      Menu.setApplicationMenu(menu)\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
        },
        {
          "date": 1665650381605,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,10 @@\n import { app, shell, BrowserWindow, Menu } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n-import { useMenu } from './useMenu'\n \n function createWindow(): void {\n   // Create the browser window.\n-\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n@@ -20,26 +18,63 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-  const useMenu = (window:BrowserWindow) => {\n-    const menu = Menu.buildFromTemplate([\n+\n+  const menu = Menu.buildFromTemplate([\n+    {\n+      label: app.name,\n+      submenu: [\n         {\n-          label: app.name,\n-          submenu: [\n-            {\n-              click: () => {},\n-              label: 'Increment'\n-            },\n-            {\n-              click: () => {},\n-              label: 'Decrement'\n-            }\n-          ]\n+          click: () => {},\n+          label: 'Increment'\n         },\n-       \n-      ])\n-      Menu.setApplicationMenu(menu)\n+        {\n+          click: () => {},\n+          label: 'Decrement'\n+        }\n+      ]\n+    },\n+    {\n+      label: '文件',\n+      submenu: [\n+        {\n+          click: () => {},\n+          label: '新建',\n+          accelerator: 'Shift+CmdOrCtrl+H'\n+        },\n+        {\n+          click: () => {},\n+          label: '新建标签页',\n+          accelerator: 'Shift+CmdOrCtrl+H'\n+        },\n+        {\n+          label: '打开',\n+          click: ()=>{}\n+        }\n+      ]\n+    },\n+    {\n+      label: '显示',\n+      submenu: [\n+        {\n+          click: () => {},\n+          label: '侧边栏'\n+        },\n+        {\n+          click: () => {},\n+          label: '工具栏'\n+        }\n+      ]\n+    }\n+  ])\n+  Menu.setApplicationMenu(menu)\n+\n+\n+\n+\n+\n+\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
        },
        {
          "date": 1665650478496,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,14 +39,12 @@\n       submenu: [\n         {\n           click: () => {},\n           label: '新建',\n-          accelerator: 'Shift+CmdOrCtrl+H'\n         },\n         {\n           click: () => {},\n           label: '新建标签页',\n-          accelerator: 'Shift+CmdOrCtrl+H'\n         },\n         {\n           label: '打开',\n           click: ()=>{}\n"
        },
        {
          "date": 1665652561927,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { app, shell, BrowserWindow, Menu } from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import { useMenu } from './useMenu'\n \n function createWindow(): void {\n   // Create the browser window.\n   const mainWindow = new BrowserWindow({\n@@ -18,61 +19,15 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n+useMenu(mainWindow)\n \n-  const menu = Menu.buildFromTemplate([\n-    {\n-      label: app.name,\n-      submenu: [\n-        {\n-          click: () => {},\n-          label: 'Increment'\n-        },\n-        {\n-          click: () => {},\n-          label: 'Decrement'\n-        }\n-      ]\n-    },\n-    {\n-      label: '文件',\n-      submenu: [\n-        {\n-          click: () => {},\n-          label: '新建',\n-        },\n-        {\n-          click: () => {},\n-          label: '新建标签页',\n-        },\n-        {\n-          label: '打开',\n-          click: ()=>{}\n-        }\n-      ]\n-    },\n-    {\n-      label: '显示',\n-      submenu: [\n-        {\n-          click: () => {},\n-          label: '侧边栏'\n-        },\n-        {\n-          click: () => {},\n-          label: '工具栏'\n-        }\n-      ]\n-    }\n-  ])\n-  Menu.setApplicationMenu(menu)\n \n \n \n \n \n-\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n \n"
        },
        {
          "date": 1665653147704,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,17 @@\n-import { app, shell, BrowserWindow, Menu } from 'electron'\n+import { app, shell, BrowserWindow, ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n import { useMenu } from './useMenu'\n \n function createWindow(): void {\n-  // Create the browser window.\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n     show: false,\n+    // 关闭默认的上面那栏\n+    frame: false,\n     autoHideMenuBar: true,\n     ...(process.platform === 'linux'\n       ? {\n           icon: path.join(__dirname, '../../build/icon.png')\n@@ -19,24 +21,16 @@\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n   })\n-useMenu(mainWindow)\n-\n-\n-\n-\n-\n-\n+  useMenu(mainWindow)\n   mainWindow.on('ready-to-show', () => {\n     mainWindow.show()\n   })\n-\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n     shell.openExternal(details.url)\n     return { action: 'deny' }\n   })\n-\n   // HMR for renderer base on electron-vite cli.\n   // Load the remote URL for development or the local html file for production.\n   if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n     mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n@@ -56,8 +50,17 @@\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n+    ipcMain.on(MIN_SCREEN, () => window.minimize())\n+    ipcMain.on(MAX_SCREEN, () => {\n+      if (window.isMaximized()) {\n+        window.unmaximize()\n+      } else {\n+        window.maximize()\n+      }\n+    })\n+    ipcMain.on(CLOSE_SCREEN, () => window.close())\n   })\n \n   createWindow()\n \n@@ -77,5 +80,5 @@\n   }\n })\n \n // In this file you can include the rest of your app\"s specific main process\n-// code. You can also put them in s\n\\ No newline at end of file\n+// code. You can also put them in separate files and require them here.\n\\ No newline at end of file\n"
        },
        {
          "date": 1665666544107,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,8 @@\n     show: false,\n     // 关闭默认的上面那栏\n     frame: false,\n     autoHideMenuBar: true,\n-    ...(process.platform === 'linux'\n-      ? {\n-          icon: path.join(__dirname, '../../build/icon.png')\n-        }\n-      : {}),\n     webPreferences: {\n       preload: path.join(__dirname, '../preload/index.js'),\n       sandbox: false\n     }\n"
        },
        {
          "date": 1665666914723,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,12 +65,11 @@\n     if (BrowserWindow.getAllWindows().length === 0) createWindow()\n   })\n })\n \n-// Quit when all windows are closed, except on macOS. There, it's common\n-// for applications and their menu bar to stay active until the user quits\n-// explicitly with Cmd + Q.\n+\n app.on('window-all-closed', () => {\n+  // mac的plateform是darwin\n   if (process.platform !== 'darwin') {\n     app.quit()\n   }\n })\n"
        },
        {
          "date": 1665737312786,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n import { app, shell, BrowserWindow, ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n-import { useMenu } from './useMenu'\n-\n+import { useMenu } from './hooks/useMenu'\n function createWindow(): void {\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n"
        },
        {
          "date": 1665737529972,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { app, shell, BrowserWindow, ipcMain} from 'electron'\n import * as path from 'path'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n-import { useMenu } from './hooks/useMenu'\n+import { useMenu } from './electron/useMenu'\n function createWindow(): void {\n   const mainWindow = new BrowserWindow({\n     width: 900,\n     height: 670,\n"
        },
        {
          "date": 1665737951539,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,20 +23,16 @@\n   mainWindow.webContents.setWindowOpenHandler((details) => {\n     shell.openExternal(details.url)\n     return { action: 'deny' }\n   })\n-  // HMR for renderer base on electron-vite cli.\n-  // Load the remote URL for development or the local html file for production.\n+  // 判断是加载什么，开发模式就是加载vite的地址\n   if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n     mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n   } else {\n     mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n   }\n }\n-\n-// This method will be called when Electron has finished\n-// initialization and is ready to create browser windows.\n-// Some APIs can only be used after this event occurs.\n+// electron初始化，可以创建窗口\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n \n@@ -70,8 +66,5 @@\n   // mac的plateform是darwin\n   if (process.platform !== 'darwin') {\n     app.quit()\n   }\n-})\n-\n-// In this file you can include the rest of your app\"s specific main process\n-// code. You can also put them in separate files and require them here.\n\\ No newline at end of file\n+})\n\\ No newline at end of file\n"
        },
        {
          "date": 1665738004799,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,10 @@\n   } else {\n     mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n   }\n }\n+\n+\n // electron初始化，可以创建窗口\n app.whenReady().then(() => {\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n"
        },
        {
          "date": 1665755564319,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,7 @@\n-import { app, shell, BrowserWindow, ipcMain} from 'electron'\n-import * as path from 'path'\n+import { app, BrowserWindow } from 'electron'\n import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n-import { CLOSE_SCREEN, MAX_SCREEN, MIN_SCREEN } from './constant'\n-import { useMenu } from './electron/useMenu'\n-function createWindow(): void {\n-  const mainWindow = new BrowserWindow({\n-    width: 900,\n-    height: 670,\n-    show: false,\n-    // 关闭默认的上面那栏\n-    frame: false,\n-    autoHideMenuBar: true,\n-    webPreferences: {\n-      preload: path.join(__dirname, '../preload/index.js'),\n-      sandbox: false\n-    }\n-  })\n-  useMenu(mainWindow)\n-  mainWindow.on('ready-to-show', () => {\n-    mainWindow.show()\n-  })\n-  mainWindow.webContents.setWindowOpenHandler((details) => {\n-    shell.openExternal(details.url)\n-    return { action: 'deny' }\n-  })\n-  // 判断是加载什么，开发模式就是加载vite的地址\n-  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n-    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n-  } else {\n-    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n-  }\n-}\n+import { createWindow } from './electron/createWindow'\n \n \n // electron初始化，可以创建窗口\n app.whenReady().then(() => {\n@@ -42,17 +12,9 @@\n   // and ignore CommandOrControl + R in production.\n   // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n   app.on('browser-window-created', (_, window) => {\n     optimizer.watchWindowShortcuts(window)\n-    ipcMain.on(MIN_SCREEN, () => window.minimize())\n-    ipcMain.on(MAX_SCREEN, () => {\n-      if (window.isMaximized()) {\n-        window.unmaximize()\n-      } else {\n-        window.maximize()\n-      }\n-    })\n-    ipcMain.on(CLOSE_SCREEN, () => window.close())\n+\n   })\n \n   createWindow()\n \n"
        },
        {
          "date": 1665755575029,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { app, BrowserWindow } from 'electron'\n-import { electronApp, optimizer, is } from '@electron-toolkit/utils'\n+import { electronApp, optimizer } from '@electron-toolkit/utils'\n import { createWindow } from './electron/createWindow'\n \n \n // electron初始化，可以创建窗口\n"
        },
        {
          "date": 1665766790573,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n \n \n // electron初始化，可以创建窗口\n app.whenReady().then(() => {\n+        // 官方是在createWindow的位置事件监听\n+        onIpcMainEvents(mainWindow)\n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n \n   // Default open or close DevTools by F12 in development\n"
        },
        {
          "date": 1665766802484,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,9 @@\n \n \n // electron初始化，可以创建窗口\n app.whenReady().then(() => {\n-        // 官方是在createWindow的位置事件监听\n-        onIpcMainEvents(mainWindow)\n+  \n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n \n   // Default open or close DevTools by F12 in development\n"
        },
        {
          "date": 1665766821223,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n \n \n // electron初始化，可以创建窗口\n app.whenReady().then(() => {\n-  \n   // Set app user model id for windows\n   electronApp.setAppUserModelId('com.electron')\n \n   // Default open or close DevTools by F12 in development\n"
        }
      ],
      "date": 1665388140026,
      "name": "Commit-0",
      "content": "import { app, shell, BrowserWindow } from 'electron'\nimport * as path from 'path'\nimport { electronApp, optimizer, is } from '@electron-toolkit/utils'\n\nfunction createWindow(): void {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 900,\n    height: 670,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === 'linux'\n      ? {\n          icon: path.join(__dirname, '../../build/icon.png')\n        }\n      : {}),\n    webPreferences: {\n      preload: path.join(__dirname, '../preload/index.js'),\n      sandbox: false\n    }\n  })\n\n  mainWindow.on('ready-to-show', () => {\n    mainWindow.show()\n  })\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url)\n    return { action: 'deny' }\n  })\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {\n    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])\n  } else {\n    mainWindow.loadFile(path.join(__dirname, '../renderer/index.html'))\n  }\n}\n\n\n\n\n\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId('com.electron')\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on('browser-window-created', (_, window) => {\n    optimizer.watchWindowShortcuts(window)\n  })\n\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"
    }
  ]
}
